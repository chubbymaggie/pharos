% these are non-pointers because they are used in a shift
opAsr(0x10, 0x3, 0x4).

% these are pointers by virtue of having memadd facts
memaddr(0x2).
memaddr(0x5).
memaddr(0x6).

opAdd(0xA, [0x6, 0x2, 0x3, 0x5]). % odd number of pointer added => (0xA) is a pointer
opAdd(0xB, [0x4, 0x2, 0x5]). % even number of pointers => (0xB) is not pointer

opAdd(0xC, [0x6, 0x3]). % odd number of pointers (1) added => (0xC) is a pointer
opAsr(0xC, 0x3, 0x4).  % this refutes the previous pointerness of (0xc); thus (0xC) should be BOTTOM

opAdd(0x10, [0x11, 0x12, 0x13, 0x14]).
value(0x13, 0xffffffff).

bitwidth(0x5, 0x20).
bitwidth(0x2, 0x20).
bitwidth(0x6, 0x20).
bitwidth(0x10, 0x20).
bitwidth(0x11, 0x20).
bitwidth(0x12, 0x20).
bitwidth(0x14, 0x20).
bitwidth(0x3, 0x20).
bitwidth(0x4, 0x20).
bitwidth(0xA, 0x20).
bitwidth(0xB, 0x20).
bitwidth(0xC, 0x20).
bitwidth(0x13, 0x20).
bitwidth(0x32, 0x20).

% the expected results
expectedPointer(0x5, is).
expectedPointer(0x2, is).
expectedPointer(0x6, is).
expectedPointer(0x10, isnot).
expectedPointer(0x3, isnot).
expectedPointer(0x4, isnot).
expectedPointer(0xA, is).
expectedPointer(0xB, isnot).
expectedPointer(0xC, bottom).

expectedPointer(0x13, isnot).
expectedSigned(0x13, is).

% no pointers are signed
expectedSigned(0xA, isnot).
expectedSigned(0xC, isnot).
expectedSigned(0x2, isnot).
expectedSigned(0x5, isnot).
expectedSigned(0x6, isnot).



