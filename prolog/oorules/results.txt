This file documents the results currently exported from OOAnalyzer in human readable terms.

finalClass(ClassID, VFTable, CSize, LSize, RealDestructor, MethodList)

  This result defines the existance of a class.  It is intended to be the first query to
  Prolog, which could drive all other required queries.  The ClassID field is a unique
  identifier for a class.

  VFTable is the address of the primary virtual function table associated with this class.
  This is the table that contains the derived class' newly declared virtual methods, and
  typically contains the method of the class' primary parent as well.  It is typically the
  table at offset zero in the object.  The VFTable will have the value zero if no VFTable was
  associated with the class.  In the case of multiple inheritance, additional tables may be
  associated with this class through the inheritance result described below.

  Csize is minimum certain size of the class.  Lsize is the likely maximum size of the class.
  The likely size is guaranteed to be greater than or equal to the certain size.  Classes are
  explicitly permitted to have a certain size of zero, but they may not have likely sizes of
  zero.  Classes are explicitly permitted to have certain and likely sizes that match exactly.
  Classes are explicitly permitted to have certain and likely sizes that exceed the member
  definitions reported as separate results, but member definitions that exceed the likely size
  are not permitted.

  The RealDestructor field is the address of the real destructor associated with the class if
  one was identified, and zero otherwise.  

  The MethodList field contains all methods associated with the class regardless of their
  confidence levels or status as constructors, destructors, etc.  This list should include only
  those methods actually implemented on the class.  Thus all methods in the list should
  reference the same class name in their symbols.  Listing methods in this way is partially a
  convenience and optimization for importing class definitions into C++, since it allows the
  association with the class to be made simply and early in the import.

finalVFTable(VFTable, CertainSize, LikelySize, RTTIAddress, RTTIName)

  The virtual function table at the address specified by VFTable is associated with the RTTI
  object locator at address RTTIAddress.  If there is no object locator, this value will be
  zero.  The certain size is the minimum certain size of the table (there are certain to be at
  least this many valid entries).  The likely size is the maximum likely size of the table (it
  is very unlikely that there are more than this number of valid entries).  The likely size is
  guaranteed to be greater than or equal to the certain size.  Tables are explicitly permitted
  to have a certain size of zero, but they may not have likely sizes of zero.  Possible virtual
  function tables that did not meet minimum standards are not reported at all.  The RTTIName
  field extracts the name of the class from the TypeDescriptor implied by the RTTIAddress,
  which simplifies debugging as as duplicative of the RTTIAddress field.

finalResolvedVirtualCall(Insn, VFTable, Target)

  The call at Insn can be resolved to the Target through the virtual function table at VFTable.
  Most of the information describing a virtual function call is already avilable in C++ once
  you know the address of the call instruction.  This result communicates just the required
  information for simplicity and clarity.

finalEmbeddedObject(OuterClass, Offset, EmbeddedClass, likely)

  In the OuterClass (which is a class identifier) at the specified offset is an object instance
  of the type specified by EmbeddedClass.  EmbeddedClass is also a class identifier.  The
  embedded object is not believed to be a base class (via an inheritance relationship), for
  that relationship see finalInheritance().  

  The ordering of the parameters should perhaps be changed to match the facts. The 'likely'
  parameter is garbage and should be removed.

finalInheritance(DerivedClassID, BaseClassID, ObjectOffset, certain, VFTable)

  In the Derived class at the specified offset is an object instance of the type specified by
  Base.  If the base class is not the first base class (non-zero offset) and the base class has
  a virtual function table, the VFTable field will contain the derived class instance of that
  virtual function table.   

  In general, our understanding of how to report multiple and virtual inheritance is evolving.
  The latest output does NOT report virtual ancestors as direct bases of the derived class.  We
  should probably report those as a separate result?

  The 'certain' field is garbage and should be removed.

finalMember(Class, Offset, Sizes, certain)

  The finalMember() result documents the existence of the definition of a member on a specific
  class.  This fact is intended to only report the members defined on the class from a C++
  source code perspective.  

  The Class is specified with a class identifier.  Offset is the positive offset into the
  specified class (and not it's base or embedded classes).  Sizes is a list of all the
  different sizes through which the member has been accessed anywhere in the program.  
 
  Embedded object and inherited bases are not listed again as finalMembers.  Instead they are
  list in the finalEmbeddedObject and finalInheritance results.

  The final field is garbage and should be removed.

finalMemberAccess(Class, Offset, Size, EvidenceList)

  The member at Offset in Class was accessed using the given Size by the list of evidence
  instructions provided. The list of evidence instructions only contains instructions from the
  methods assigned to the class.  Other accesses of base class members will appear in the
  accesses for their respective classes.

  Note that that presentation does not present knowledge about the class and subclass
  relationships particularly clearly.  For those observations refer to finalMember() instead.

finalMethodProperty(Method, constructor, certain)

  This result marks that a Method is a constructor.
  The 'certain' field is garbage and should be removed.

finalMethodProperty(Method, deletingDestructor, certain)

  This result marks that a method is a deleting destructor.
  The 'certain' field is garbage and should be removed.

finalMethodProperty(Method, realDestructor, certain)

  This result marks that a method is a real destructor.
  The 'certain' field is garbage and should be removed.

  This is duplicative of the field in the finalClass result but it was more convenient to have
  it reported consistently with otehr properties for debugging, so at present we're emitting
  this result as well, but it may be eliminated in the future.

finalMethodProperty(Method, virtual, certain)

  This result marks that a method is declared virtual.
  The 'certain' field is garbage and should be removed.

/* Local Variables:   */
/* mode: text         */
/* fill-column:    95 */
/* comment-column: 0  */
/* End:               */
