diff --git a/XSB/emu/token_xsb.c b/XSB/emu/token_xsb.c
index c59e9e6..5775113 100644
--- a/XSB/emu/token_xsb.c
+++ b/XSB/emu/token_xsb.c
@@ -30,6 +30,7 @@
 #include <errno.h>
 #include <string.h>
 #include <math.h>
+#include <inttypes.h>
 
 #include "auxlry.h"
 #include "context.h"
@@ -756,6 +757,7 @@ char    tok2long[]      = "token too long";
 char    eofinrem[]      = "end of file in comment";
 char    badexpt[]       = "bad exponent";
 char    badradix[]      = "radix not 0 or 2..36";
+char    badinteger[]    = "integer out of range";
  
  
 /*  read_character(FILE* card, STRFILE* instr, Char q)
@@ -1115,6 +1117,7 @@ START:
                         if (c != '_') {
 			    oldv = newv;
 			    newv = newv*d + DigVal(c);
+#if 0
 			    if (newv < oldv || newv > MY_MAXINT) {
 				xsb_error("Overflow in radix notation, returning float");
 			        double_v = oldv*1.0*d + DigVal(c);
@@ -1130,7 +1133,14 @@ START:
 				else
 					token->type = TK_REAL;
 				return token;
+                            }
+#else
+                            if ((uintmax_t)newv < (uintmax_t)oldv) {
+                              SyntaxError(CTXTc badinteger);
+                              //		      token->type = TK_ERROR;
+                              //		      return token;
 			    }
+#endif
 			}
 		    rad_int = newv;
                     if (c == intab.radix) 
diff --git a/XSB/syslib/ccallxsb.P b/XSB/syslib/ccallxsb.P
index 7be8981..4ec8055 100644
--- a/XSB/syslib/ccallxsb.P
+++ b/XSB/syslib/ccallxsb.P
@@ -48,6 +48,10 @@
 	call(Message),
 	call_c(One).
 
+:- import lazy_reeval_trap/1 from increval.
+'_$lazy_reeval_int'(One,_Two):-
+        lazy_reeval_trap(One).
+
 c_callloop_query_loop(Regs) :- 
 	catch(c_callloop_query_loop0(Regs),Ball,ccall_error_handler(Ball)).
 
diff --git a/XSB/emu/cinterf.c b/XSB/emu/cinterf.c
index ba2ed31..c3a88ab 100644
--- a/XSB/emu/cinterf.c
+++ b/XSB/emu/cinterf.c
@@ -266,13 +266,22 @@ DllExport void call_conv ensure_heap_space(CTXTdeclc int space, int regcnt) {
 DllExport xsbBool call_conv c2p_functor(CTXTdeclc char *functor, int arity,
 					prolog_term var)
 {
+    return c2p_functor_in_mod(NULL, functor, arity, var);
+}
+
+DllExport xsbBool call_conv c2p_functor_in_mod(CTXTdeclc char *modname,
+					       char *functor, int arity,
+					       prolog_term var)
+{
     Cell v = (Cell)var;
     Pair sym;
     int i;
+    Psc modpsc;
     if (is_var(v)) {
       XSB_Deref(v);
       //      sym = (Pair)insert(functor, (byte)arity, (Psc)flags[CURRENT_MODULE], &i);
-      sym = (Pair)insert_psc(functor, arity, (Psc)flags[CURRENT_MODULE], &i);
+      modpsc = modname ? pair_psc(insert_module(0, modname)) : (Psc)flags[CURRENT_MODULE];
+      sym = (Pair)insert_psc(functor, arity, modpsc, &i);
 	sreg = hreg;
 	hreg += arity + 1;
 	bind_cs(vptr(v), sreg);
diff --git a/XSB/emu/cinterf.h b/XSB/emu/cinterf.h
index 4eeb57f..2f73e3a 100644
--- a/XSB/emu/cinterf.h
+++ b/XSB/emu/cinterf.h
@@ -83,6 +83,7 @@ extern "C" {
 **  		c2p_string:	string x prolog_term -> xsbBool
 **  		c2p_list: 	prolog_term -> xsbBool
 **  		c2p_functor:	string x int x prolog_term -> xsbBool
+**  		c2p_functor_in_mod: string x string x int x prolog_term -> xsbBool
 **  		c2p_nil:	prolog_term -> xsbBool
 **  		c2p_setfree:	prolog_term -> void  !! Dangerous
 **  	    Prolog to C:
@@ -181,6 +182,8 @@ extern "C" {
 #define extern_c2p_float(dbl, pterm)  c2p_float(CTXTc dbl, pterm)
 #define extern_c2p_functor(functor,arity,var) \
   c2p_functor(CTXTc functor,arity,var)
+#define extern_c2p_functor_in_mod(modname,functor,arity,var)    \
+  c2p_functor_in_mod(CTXTc modname,functor,arity,var)
 #define extern_c2p_int(pint,pterm) c2p_int(CTXTc pint, pterm)
 #define extern_c2p_list(var) c2p_list(CTXTc var)
 #define extern_c2p_nil(var) c2p_nil(CTXTc var)
@@ -256,5 +259,6 @@ DllExport extern xsbBool call_conv c2p_list(CTXTdeclc prolog_term);
 DllExport extern xsbBool call_conv c2p_nil(CTXTdeclc prolog_term);
 DllExport extern void call_conv ensure_heap_space(CTXTdeclc int, int);
 DllExport extern xsbBool call_conv c2p_functor(CTXTdeclc char *, int, prolog_term);
+DllExport extern xsbBool call_conv c2p_functor_in_mod(CTXTdeclc char *, char *, int, prolog_term);
 DllExport extern void call_conv c2p_setfree(prolog_term);
 DllExport extern void call_conv c2p_chars(CTXTdeclc char *str, int regs_to_protect, prolog_term term);
diff --git a/XSB/emu/builtin.c b/XSB/emu/builtin.c
index 9464f53..d59545d 100644
--- a/XSB/emu/builtin.c
+++ b/XSB/emu/builtin.c
@@ -2132,7 +2132,7 @@ int builtin_call(CTXTdeclc byte number)
       break;
     }
     case XSB_INT    :
-      if (fprintf(fptr, "%" Intfmt, (Integer)ptoc_int(CTXTc 3)) < 0)
+      if (fprintf(fptr, "%#" Intxfmt, (Integer)ptoc_int(CTXTc 3)) < 0)
 	xsb_permission_error(CTXTc strerror(errno),"file write",
 			     open_file_name(io_port),"file_puttoken",3);
 
